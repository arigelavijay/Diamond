@using Newtonsoft.Json
@model NetStock.Contract.DashboardReport
@{
    ViewBag.Title = "index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="box box-solid box-default">
    <div class="box-header with-border">
        <h3 class="box-title"><i class="fa fa-map-marker"></i>&nbsp;Dashboard </h3>
    </div>
    <div class="box-body">
        <div class="row">
            <div class="col-md-3 col-sm-6 col-xs-12">
                <div class="info-box">
                    <span class="info-box-icon bg-aqua"><i class="fa fa-bar-chart" aria-hidden="true"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Daily Sales</span>
                        <span class="info-box-number">@Model.monthlyFiguresDashboard.TotalSales</span>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 col-xs-12">
                <div class="info-box">
                    <span class="info-box-icon bg-red"><i class="fa fa-google-plus"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Daily Goods Issue</span>
                        <span class="info-box-number">@Model.monthlyFiguresDashboard.TotalGoodsIssue</span>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 col-xs-12">
                <div class="info-box">
                    <span class="info-box-icon bg-green"><i class="fa fa-truck" aria-hidden="true"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Goods Receive</span>
                        <span class="info-box-number">@Model.monthlyFiguresDashboard.TotalGoodsReceive</span>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 col-xs-12">
                <div class="info-box">
                    <span class="info-box-icon bg-yellow"><i class="fa fa-credit-card" aria-hidden="true"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Purchase Orders</span>
                        <span class="info-box-number">@Model.monthlyFiguresDashboard.TotalPO</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" style="margin-top:20px;">
            <div class="col-md-8">
                <p class="text-center">
                    @*<strong>Sales: 1 Jan, 2014 - 30 Jul, 2014</strong>*@
                </p>

                <div class="chart">
                    <!-- Sales Chart Canvas -->
                    <canvas id="salesChart" style="height: 180px; width: 703px;" width="703" height="180"></canvas>
                </div>
                <!-- /.chart-responsive -->
            </div>
            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-8">
                        <div class="chart-responsive">
                            <canvas id="pieChart" height="175" width="205" style="width: 205px; height: 175px;"></canvas>
                        </div>
                        <!-- ./chart-responsive -->
                    </div>
                    <!-- /.col -->
                    <div class="col-md-4">
                        <ul class="chart-legend clearfix">
                            <li><i class="fa fa-circle-o text-red"></i> @Model.Months[0]</li>
                            <li><i class="fa fa-circle-o text-green"></i> @Model.Months[1]</li>
                            <li><i class="fa fa-circle-o text-yellow"></i> @Model.Months[2]</li>
                            <li><i class="fa fa-circle-o text-aqua"></i> @Model.Months[3]</li>
                            <li><i class="fa fa-circle-o text-light-blue"></i> @Model.Months[4]</li>
                            <li><i class="fa fa-circle-o text-gray"></i> @Model.Months[5]</li>
                        </ul>
                    </div>
                    <!-- /.col -->
                </div>
            </div>
        </div>

    </div>
</div>
@section scripts{
    <script src="@Url.Content("~/Scripts/jquery-jvectormap-1.2.2.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery-jvectormap-world-mill-en.js")"></script>
    <script src="@Url.Content("~/Scripts/Chart.min.js")"></script>    

    <script type="text/javascript">
        $(function () {

            /* ChartJS
             * -------
             * Here we will create a few charts using ChartJS
             */

            //-----------------------
            //- MONTHLY SALES CHART -
            //-----------------------

            // Get context with jQuery - using jQuery's .get() method.
            var salesChartCanvas = $("#salesChart").get(0).getContext("2d");
            // This will get the first returned node in the jQuery collection.
            var salesChart = new Chart(salesChartCanvas);

            var salesChartData = {
                labels: @Html.Raw(JsonConvert.SerializeObject(Model.Months)),
                datasets: [
                  {
                      label: '@Model.lstDashboardData[1].ItemName',
                      fillColor: "rgb(210, 214, 222)",
                      strokeColor: "rgb(210, 214, 222)",
                      pointColor: "rgb(210, 214, 222)",
                      pointStrokeColor: "#c1c7d1",
                      pointHighlightFill: "#fff",
                      data: @JsonConvert.SerializeObject(Model.lstDashboardData[1].ItemData),
                      pointHighlightStroke: "rgb(220,220,220)"
                  },
                    {
                        label: '@Model.lstDashboardData[0].ItemName',
                        fillColor: "rgba(60,141,188,0.9)",
                        strokeColor: "rgba(60,141,188,0.8)",
                        pointColor: "#3b8bba",
                        pointStrokeColor: "rgba(60,141,188,1)",
                        pointHighlightFill: "#fff",
                        data: @JsonConvert.SerializeObject(Model.lstDashboardData[0].ItemData),
                        pointHighlightStroke: "rgba(60,141,188,1)"

                    }
                ]
            };

            var salesChartOptions = {
                //Boolean - If we should show the scale at all
                showScale: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - Whether the line is curved between points
                bezierCurve: true,
                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.3,
                //Boolean - Whether to show a dot for each point
                pointDot: true,
                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                //Boolean - Whether to fill the dataset with a color
                datasetFill: true,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%=datasets[i].label%></li><%}%></ul>",
                //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true,
                multiTooltipTemplate: "<%= datasetLabel %> - <%= value %>",
                scales: {
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'probability'
                        }
                    }]
                }
            };

            //Create the line chart
            salesChart.Line(salesChartData, salesChartOptions);

            //---------------------------
            //- END MONTHLY SALES CHART -
            //---------------------------

            //-------------
            //- PIE CHART -
            //-------------
            // Get context with jQuery - using jQuery's .get() method.
            var pieChartCanvas = $("#pieChart").get(0).getContext("2d");
            var pieChart = new Chart(pieChartCanvas);
            var PieData = [
              {
                  value: @Model.lstDashboardData[1].ItemData[0],
                  color: "#f56954",
                  highlight: "#f56954",
                  label: '@Model.Months[0]'
              },
              {
                  value: @Model.lstDashboardData[1].ItemData[1],
                  color: "#00a65a",
                  highlight: "#00a65a",
                  label: '@Model.Months[1]'
              },
              {
                  value: @Model.lstDashboardData[1].ItemData[2],
                  color: "#f39c12",
                  highlight: "#f39c12",
                  label: '@Model.Months[2]'
              },
              {
                  value: @Model.lstDashboardData[1].ItemData[3],
                  color: "#00c0ef",
                  highlight: "#00c0ef",
                  label: '@Model.Months[3]'
              },
              {
                  value: @Model.lstDashboardData[1].ItemData[4],
                  color: "#3c8dbc",
                  highlight: "#3c8dbc",
                  label: '@Model.Months[4]'
              },
              {
                  value: @Model.lstDashboardData[1].ItemData[5],
                  color: "#d2d6de",
                  highlight: "#d2d6de",
                  label: '@Model.Months[5]'
              }
            ];
            var pieOptions = {
                //Boolean - Whether we should show a stroke on each segment
                segmentShowStroke: true,
                //String - The colour of each segment stroke
                segmentStrokeColor: "#fff",
                //Number - The width of each segment stroke
                segmentStrokeWidth: 1,
                //Number - The percentage of the chart that we cut out of the middle
                percentageInnerCutout: 50, // This is 0 for Pie charts
                //Number - Amount of animation steps
                animationSteps: 100,
                //String - Animation easing effect
                animationEasing: "easeOutBounce",
                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: true,
                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true,
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: false,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>",
                //String - A tooltip template
                tooltipTemplate: "<%=value %> <%=label%> users"
            };
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            pieChart.Doughnut(PieData, pieOptions);
            //-----------------
            //- END PIE CHART -
            //-----------------

            /* jVector Maps
             * ------------
             * Create a world map with markers
             */

        });
    </script>
}

